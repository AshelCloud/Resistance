<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_Player_Idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

global.timeValue = 1;
//global.Lunching_Arm = false;
jumping = false;
isAttacking = false;
isClickNextAttack = false;
attackIndex = 0;
isDie = false;

spd = 4;
grav = 1;
jspd = 12;
vspd = 0;
hspd = 0;

hp = 5;

invuln = 0;
fadeStep = -0.1;
 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initalization

image_speed = 0.15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invuln = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move

left = keyboard_check(ord('A'));
right = keyboard_check(ord('D'));
jump = keyboard_check(vk_space);

//check for ground
if(place_meeting(x, y+1, Wall))
{
    vspd = 0;
    jumping = false;
    if(jump &amp;&amp; !isAttacking)
    {
        image_index = 0;
        vspd = -jspd;
        jumping = true;
    }
}
else
{
    if(vspd &lt; 10)
    {
        vspd += grav * global.timeValue;
    }
}

if(place_meeting(x, y+vspd, Wall))
{
    while(!place_meeting(x, y+sign(vspd), Wall))
    {
        y += sign(vspd) * global.timeValue;
    }
    vspd = 0;
}

y += vspd * global.timeValue;

if(left &amp;&amp; !isAttacking)
{
    image_xscale = -1;
    hspd = -spd;
}

if(right &amp;&amp; !isAttacking)
{
    image_xscale = 1;
    hspd = spd;
}

if( (!left &amp;&amp; !right) || (left &amp;&amp; right) || isAttacking)
{
    hspd = 0;
}

if(place_meeting(x + hspd, y, Wall))
{
    while(!place_meeting(x+sign(hspd), y, Wall))
    {
        x += sign(hspd) * global.timeValue;
    }
    hspd = 0;
}

x += hspd * global.timeValue;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Sprite

image_speed = 0.15 * global.timeValue;

if(isDie)
{
    image_speed = 0.075 * global.timeValue;
    sprite_index = Spr_Player_Die;
}
else if(left &amp;&amp; right)
{
    sprite_index = Spr_Player_Idle;
}
else if( !(left || right) &amp;&amp; jumping &amp;&amp; !isAttacking)
{
    sprite_index = Spr_Player_Jump;
}
else if( (left || right ) &amp;&amp; !isAttacking)
{
    sprite_index = Spr_Player_Run;
}
else if(!isAttacking)
{
    sprite_index = Spr_Player_Idle;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Death
if(0 &gt;= hp)
{
    isDie = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blink

if (invuln == 1)
{
    if (image_alpha &gt;= 1) {
  image_alpha = 1;
  fadeStep = -0.1;
}
    else if (image_alpha &lt;= 0) {
  image_alpha = 0;
  fadeStep = 0.1;
}
}
image_alpha = image_alpha + fadeStep;
 
if (invuln == 0)
{
    image_alpha = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack
if(isAttacking)
{
    isClickNextAttack = true;
}
else if(!jumping)
{
    isAttacking = true;
    
    sprite_index = Spr_Player_Attack_Once;
    var ins = instance_create(x, y, Player_Attack_Once);
    ins.image_xscale = image_xscale;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!isClickNextAttack &amp;&amp; ( sprite_index == Spr_Player_Attack_Once || sprite_index == Spr_Player_Attack_Twice || sprite_index == Spr_Player_Attack_Thrice) )
{
    isAttacking = false;
    isClickNextAttack = false;
}
else
{
    if(sprite_index == Spr_Player_Attack_Once)
    {
        if(isClickNextAttack)
        {
            sprite_index = Spr_Player_Attack_Twice;
            var ins = instance_create(x, y, Player_Attack_Twice);
            ins.image_xscale = image_xscale;
            isClickNextAttack = false;
        }
    }
    
    if(sprite_index == Spr_Player_Attack_Twice)
    {
        if(isClickNextAttack)
        {
            sprite_index = Spr_Player_Attack_Thrice;
            var ins = instance_create(x, y, Player_Attack_Thrice);
            ins.image_xscale = image_xscale;
            isClickNextAttack = false;
        }
    }
    
    if(sprite_index == Spr_Player_Attack_Thrice)
    {
        if(isClickNextAttack)
        {
            isAttacking = false;
            isClickNextAttack = false;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
